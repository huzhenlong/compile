{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAEA,IAAI,IACF,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,GAA6B,MAA7B,GACA,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,GAA6B,MAA7B,GACA,QAAO,IAAP,yCAAO,IAAP,OAAgB,QAAhB,GAA2B,IAA3B,YAHF;;;;AAOA,IAAI,aAAa,EAAE,kBAAF,IACf,OAAO,mBAAP,CAA2B,CAA3B,EAA8B,OAA9B,CAAsC,oBAAtC,KAA+D,CADjE;;;AAIA,IAAI,aAAa,cAAc,EAAE,kBAAjC;;;AAGA,EAAE,kBAAF,GAAuB,SAAvB;;AAEA,OAAO,OAAP,GAAiB,QAAQ,WAAR,CAAjB;;AAEA,IAAI,UAAJ,EAAgB;;AAEd,IAAE,kBAAF,GAAuB,UAAvB;AACD,CAHD,MAGO;;AAEL,MAAI;AACF,WAAO,EAAE,kBAAT;AACD,GAFD,CAEE,OAAM,CAAN,EAAS;AACT,MAAE,kBAAF,GAAuB,SAAvB;AACD;AACF;;AAED,OAAO,OAAP,GAAiB,EAAE,WAAW,OAAO,OAApB,EAA6B,YAAY,IAAzC,EAAjB","file":"index-compiled.js","sourcesContent":["// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\nmodule.exports = { \"default\": module.exports, __esModule: true };\n"]}