{"version":3,"sources":["writeStream.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,KAAK,QAAQ,aAAR,CAAT;;AAEA,IAAI,KAAK,QAAQ,sBAAR,CAAT;AACA,IAAI,aAAa,QAAQ,kCAAR,CAAjB;;AAEA,SAAS,WAAT,CAAqB,SAArB,EAAgC,IAAhC,EAAsC,OAAtC,EAA+C;AAC7C,MAAI,MAAM;AACR,UAAM,KAAK,IAAL,CAAU,IADR;AAER,UAAM,KAAK;AAFH,GAAV;;AAKA,MAAI,YAAY,GAAG,iBAAH,CAAqB,SAArB,EAAgC,GAAhC,CAAhB;;AAEA,OAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,EAA4B,QAA5B;AACA,OAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,EAA0B,aAA1B;AACA,YAAU,IAAV,CAAe,OAAf,EAAwB,QAAxB;AACA,YAAU,IAAV,CAAe,QAAf,EAAyB,QAAzB;;;;;AAKA,OAAK,QAAL,CAAc,IAAd,CAAmB,SAAnB,EAA8B,EAAE,KAAK,KAAP,EAA9B;;AAEA,WAAS,aAAT,GAAyB;AACvB,eAAW,IAAX,EAAiB,QAAjB;AACD;;AAED,WAAS,GAAT,CAAa,aAAb,EAA4B;AAC1B,cAAU,GAAV,CAAc,KAAd;;AAEA,aAAS,KAAT,CAAe,MAAf,EAAuB;AACrB,cAAQ,iBAAiB,MAAzB;AACD;AACF;;;AAGD,WAAS,QAAT,CAAkB,SAAlB,EAA6B;AAC3B,SAAK,QAAL,CAAc,cAAd,CAA6B,OAA7B,EAAsC,QAAtC;AACA,SAAK,QAAL,CAAc,cAAd,CAA6B,KAA7B,EAAoC,aAApC;AACA,cAAU,cAAV,CAAyB,OAAzB,EAAkC,QAAlC;AACA,cAAU,cAAV,CAAyB,QAAzB,EAAmC,QAAnC;;AAEA,QAAI,SAAJ,EAAe;AACb,aAAO,IAAI,SAAJ,CAAP;AACD;;AAED,QAAI,OAAO,UAAU,EAAjB,KAAwB,QAA5B,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,OAAG,cAAH,CAAkB,UAAU,EAA5B,EAAgC,IAAhC,EAAsC,GAAtC;AACD;AACF;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"writeStream-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('graceful-fs');\n\nvar fo = require('../../fileOperations');\nvar streamFile = require('../../src/getContents/streamFile');\n\nfunction writeStream(writePath, file, written) {\n  var opt = {\n    mode: file.stat.mode,\n    flag: file.flag,\n  };\n\n  var outStream = fs.createWriteStream(writePath, opt);\n\n  file.contents.once('error', complete);\n  file.contents.once('end', readStreamEnd);\n  outStream.once('error', complete);\n  outStream.once('finish', complete);\n\n  // Streams are piped with end disabled, this prevents the\n  // WriteStream from closing the file descriptor after all\n  // data is written.\n  file.contents.pipe(outStream, { end: false });\n\n  function readStreamEnd() {\n    streamFile(file, complete);\n  }\n\n  function end(propagatedErr) {\n    outStream.end(onEnd);\n\n    function onEnd(endErr) {\n      written(propagatedErr || endErr);\n    }\n  }\n\n  // Cleanup\n  function complete(streamErr) {\n    file.contents.removeListener('error', complete);\n    file.contents.removeListener('end', readStreamEnd);\n    outStream.removeListener('error', complete);\n    outStream.removeListener('finish', complete);\n\n    if (streamErr) {\n      return end(streamErr);\n    }\n\n    if (typeof outStream.fd !== 'number') {\n      return end();\n    }\n\n    fo.updateMetadata(outStream.fd, file, end);\n  }\n}\n\nmodule.exports = writeStream;\n"]}