{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar through2 = require('through2');\nvar Combine = require('ordered-read-streams');\nvar unique = require('unique-stream');\n\nvar glob = require('glob');\nvar micromatch = require('micromatch');\nvar resolveGlob = require('to-absolute-glob');\nvar globParent = require('glob-parent');\nvar path = require('path');\nvar extend = require('extend');\n\nvar gs = {\n  // Creates a stream for a single glob or filter\n  createStream: function(ourGlob, negatives, opt) {\n\n    // Remove path relativity to make globs make sense\n    ourGlob = resolveGlob(ourGlob, opt);\n    var ourOpt = extend({}, opt);\n    delete ourOpt.root;\n\n    // Create globbing stuff\n    var globber = new glob.Glob(ourGlob, ourOpt);\n\n    // Extract base path from glob\n    var basePath = opt.base || globParent(ourGlob) + path.sep;\n\n    // Create stream and map events from globber to it\n    var stream = through2.obj(opt,\n      negatives.length ? filterNegatives : undefined);\n\n    var found = false;\n\n    globber.on('error', stream.emit.bind(stream, 'error'));\n    globber.once('end', function() {\n      if (opt.allowEmpty !== true && !found && globIsSingular(globber)) {\n        stream.emit('error',\n          new Error('File not found with singular glob: ' + ourGlob));\n      }\n\n      stream.end();\n    });\n    globber.on('match', function(filename) {\n      found = true;\n\n      stream.write({\n        cwd: opt.cwd,\n        base: basePath,\n        path: path.normalize(filename),\n      });\n    });\n\n    return stream;\n\n    function filterNegatives(filename, enc, cb) {\n      var matcha = isMatch.bind(null, filename);\n      if (negatives.every(matcha)) {\n        cb(null, filename); // Pass\n      } else {\n        cb(); // Ignore\n      }\n    }\n  },\n\n  // Creates a stream for multiple globs or filters\n  create: function(globs, opt) {\n    if (!opt) {\n      opt = {};\n    }\n    if (typeof opt.cwd !== 'string') {\n      opt.cwd = process.cwd();\n    }\n    if (typeof opt.dot !== 'boolean') {\n      opt.dot = false;\n    }\n    if (typeof opt.silent !== 'boolean') {\n      opt.silent = true;\n    }\n    if (typeof opt.nonull !== 'boolean') {\n      opt.nonull = false;\n    }\n    if (typeof opt.cwdbase !== 'boolean') {\n      opt.cwdbase = false;\n    }\n    if (opt.cwdbase) {\n      opt.base = opt.cwd;\n    }\n\n    // Only one glob no need to aggregate\n    if (!Array.isArray(globs)) {\n      globs = [globs];\n    }\n\n    var positives = [];\n    var negatives = [];\n\n    var ourOpt = extend({}, opt);\n    delete ourOpt.root;\n\n    globs.forEach(function(glob, index) {\n      if (typeof glob !== 'string' && !(glob instanceof RegExp)) {\n        throw new Error('Invalid glob at index ' + index);\n      }\n\n      var globArray = isNegative(glob) ? negatives : positives;\n\n      // Create Minimatch instances for negative glob patterns\n      if (globArray === negatives && typeof glob === 'string') {\n        var ourGlob = resolveGlob(glob, opt);\n        glob = micromatch.matcher(ourGlob, ourOpt);\n      }\n\n      globArray.push({\n        index: index,\n        glob: glob,\n      });\n    });\n\n    if (positives.length === 0) {\n      throw new Error('Missing positive glob');\n    }\n\n    // Only one positive glob no need to aggregate\n    if (positives.length === 1) {\n      return streamFromPositive(positives[0]);\n    }\n\n    // Create all individual streams\n    var streams = positives.map(streamFromPositive);\n\n    // Then just pipe them to a single unique stream and return it\n    var aggregate = new Combine(streams);\n    var uniqueStream = unique('path');\n    var returnStream = aggregate.pipe(uniqueStream);\n\n    aggregate.on('error', function(err) {\n      returnStream.emit('error', err);\n    });\n\n    return returnStream;\n\n    function streamFromPositive(positive) {\n      var negativeGlobs = negatives.filter(indexGreaterThan(positive.index))\n        .map(toGlob);\n      return gs.createStream(positive.glob, negativeGlobs, opt);\n    }\n  },\n};\n\nfunction isMatch(file, matcher) {\n  if (typeof matcher === 'function') {\n    return matcher(file.path);\n  }\n  if (matcher instanceof RegExp) {\n    return matcher.test(file.path);\n  }\n}\n\nfunction isNegative(pattern) {\n  if (typeof pattern === 'string') {\n    return pattern[0] === '!';\n  }\n  if (pattern instanceof RegExp) {\n    return true;\n  }\n}\n\nfunction indexGreaterThan(index) {\n  return function(obj) {\n    return obj.index > index;\n  };\n}\n\nfunction toGlob(obj) {\n  return obj.glob;\n}\n\nfunction globIsSingular(glob) {\n  var globSet = glob.minimatch.set;\n\n  if (globSet.length !== 1) {\n    return false;\n  }\n\n  return globSet[0].every(function isString(value) {\n    return typeof value === 'string';\n  });\n}\n\nmodule.exports = gs;\n"]}