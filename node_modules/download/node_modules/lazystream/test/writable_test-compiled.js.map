{"version":3,"sources":["writable_test.js"],"names":[],"mappings":";;AACA,IAAI,WAAW,QAAQ,mBAAR,EAA6B,QAA5C;AACA,IAAI,gBAAgB,QAAQ,UAAR,EAAoB,aAAxC;;AAEA,QAAQ,QAAR,GAAmB;AACjB,WAAS,iBAAS,IAAT,EAAe;AACtB,SAAK,MAAL,CAAY,CAAZ;;AAEA,QAAI,WAAW,IAAI,QAAJ,CAAa,UAAS,OAAT,EAAkB;AAC3C,WAAK,EAAL,CAAQ,gBAAgB,QAAxB,EAAkC,gDAAlC;AACA,WAAK,KAAL,CAAW,QAAQ,QAAnB,EAA6B,OAA7B,EAAsC,qDAAtC;AACA,WAAK,EAAL,GAAU,IAAV;AACA,aAAO,IAAI,aAAJ,CAAkB,EAAlB,CAAP;AACF,KALc,EAKZ,EAAC,UAAU,OAAX,EALY,CAAf;;AAOA,aAAS,KAAT,CAAe,MAAf;;AAEA,SAAK,EAAL,CAAQ,SAAS,EAAjB;;AAEA,SAAK,IAAL;AACD,GAhBgB;AAiBjB,SAAO,eAAS,IAAT,EAAe;AACpB,QAAI,WAAW,CAAE,SAAF,EAAa,SAAb,CAAf;AACA,QAAI,SAAS,EAAb;;AAEA,SAAK,MAAL,CAAY,CAAZ;;AAEA,QAAI,QAAQ,IAAI,aAAJ,CAAkB,MAAlB,CAAZ;;AAEA,aAAS,OAAT,CAAiB,UAAS,IAAT,EAAe;AAC9B,YAAM,KAAN,CAAY,IAAI,MAAJ,CAAW,IAAX,CAAZ;AACD,KAFD;AAGA,SAAK,IAAL;AACD,GA7BgB;AA8BjB,YAAU,kBAAS,IAAT,EAAe;AACvB,QAAI,WAAW,CAAE,SAAF,EAAa,SAAb,CAAf;AACA,QAAI,SAAS,EAAb;AACA,QAAI,eAAe,KAAnB;;AAEA,SAAK,MAAL,CAAY,CAAZ;;AAEA,QAAI,WAAW,IAAI,QAAJ,CAAa,YAAW;AACrC,qBAAe,IAAf;AACA,aAAO,IAAI,aAAJ,CAAkB,MAAlB,CAAP;AACD,KAHc,CAAf;;AAKA,SAAK,KAAL,CAAW,YAAX,EAAyB,KAAzB,EAAgC,6DAAhC;;AAEA,aAAS,EAAT,CAAY,KAAZ,EAAmB,YAAW;AAC5B,WAAK,KAAL,CAAW,OAAO,IAAP,CAAY,EAAZ,CAAX,EAA4B,SAAS,IAAT,CAAc,EAAd,CAA5B,EAA+C,8DAA/C;AACA,WAAK,IAAL;AACD,KAHD;;AAKA,aAAS,OAAT,CAAiB,UAAS,IAAT,EAAe;AAC9B,eAAS,KAAT,CAAe,IAAI,MAAJ,CAAW,IAAX,CAAf;AACD,KAFD;AAGA,aAAS,GAAT;AACD;AArDgB,CAAnB","file":"writable_test-compiled.js","sourcesContent":["\nvar Writable = require('../lib/lazystream').Writable;\nvar DummyWritable = require('./helper').DummyWritable;\n\nexports.writable = {\n  options: function(test) {\n    test.expect(3);\n\n    var writable = new Writable(function(options) {\n       test.ok(this instanceof Writable, \"Writable should bind itself to callback's this\");\n       test.equal(options.encoding, \"utf-8\", \"Writable should make options accessible to callback\");\n       this.ok = true;\n       return new DummyWritable([]);\n    }, {encoding: \"utf-8\"});\n\n    writable.write(\"test\");\n\n    test.ok(writable.ok);\n\n    test.done();\n  },\n  dummy: function(test) {\n    var expected = [ 'line1\\n', 'line2\\n' ];\n    var actual = [];\n    \n    test.expect(0);\n\n    var dummy = new DummyWritable(actual);\n\n    expected.forEach(function(item) {\n      dummy.write(new Buffer(item));\n    });\n    test.done();\n  },\n  streams2: function(test) {\n    var expected = [ 'line1\\n', 'line2\\n' ];\n    var actual = [];\n    var instantiated = false;\n\n    test.expect(2);\n\n    var writable = new Writable(function() {\n      instantiated = true;\n      return new DummyWritable(actual);\n    });\n\n    test.equal(instantiated, false, 'DummyWritable should only be instantiated when it is needed');\n\n    writable.on('end', function() {\n      test.equal(actual.join(''), expected.join(''), 'Writable should not change the data of the underlying stream');\n      test.done();\n    });\n\n    expected.forEach(function(item) {\n      writable.write(new Buffer(item));\n    });\n    writable.end();\n  }\n};\n"]}