{"version":3,"sources":["readable_test.js"],"names":[],"mappings":"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","file":"readable_test-compiled.js","sourcesContent":["\nvar Readable = require('../lib/lazystream').Readable;\nvar DummyReadable = require('./helper').DummyReadable;\n\nexports.readable = {\n  dummy: function(test) {\n    var expected = [ 'line1\\n', 'line2\\n' ];\n    var actual = [];\n\n    test.expect(1);\n\n    new DummyReadable([].concat(expected))\n      .on('data', function(chunk) {\n        actual.push(chunk.toString());\n      })\n      .on('end', function() {\n        test.equal(actual.join(''), expected.join(''), 'DummyReadable should produce the data it was created with');\n        test.done();\n      });\n  },\n  options: function(test) {\n    test.expect(3);\n\n    var readable = new Readable(function(options) {\n       test.ok(this instanceof Readable, \"Readable should bind itself to callback's this\");\n       test.equal(options.encoding, \"utf-8\", \"Readable should make options accessible to callback\");\n       this.ok = true;\n       return new DummyReadable([\"test\"]);\n    }, {encoding: \"utf-8\"});\n\n    readable.read(4);\n\n    test.ok(readable.ok);\n\n    test.done();\n  },\n  streams2: function(test) {\n    var expected = [ 'line1\\n', 'line2\\n' ];\n    var actual = [];\n    var instantiated = false;\n\n    test.expect(2);\n\n    var readable = new Readable(function() {\n      instantiated = true;\n      return new DummyReadable([].concat(expected));\n    });\n\n    test.equal(instantiated, false, 'DummyReadable should only be instantiated when it is needed');\n\n    readable.on('readable', function() {\n      var chunk;\n      while ((chunk = readable.read())) {\n        actual.push(chunk.toString());\n      }\n    });\n    readable.on('end', function() {\n      test.equal(actual.join(''), expected.join(''), 'Readable should not change the data of the underlying stream');\n      test.done();\n    });\n\n    readable.read(0);\n  },\n  resume: function(test) {\n    var expected = [ 'line1\\n', 'line2\\n' ];\n    var actual = [];\n    var instantiated = false;\n\n    test.expect(2);\n\n    var readable = new Readable(function() {\n      instantiated = true;\n      return new DummyReadable([].concat(expected));\n    });\n\n    readable.pause();\n\n    readable.on('data', function(chunk) {\n      actual.push(chunk.toString());\n    });\n    readable.on('end', function() {\n      test.equal(actual.join(''), expected.join(''), 'Readable should not change the data of the underlying stream');\n      test.done();\n    });\n\n    test.equal(instantiated, false, 'DummyReadable should only be instantiated when it is needed');\n\n    readable.resume();\n  }\n};\n"]}