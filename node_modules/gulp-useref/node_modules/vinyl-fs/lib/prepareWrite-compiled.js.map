{"version":3,"sources":["prepareWrite.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,eAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,KAAK,QAAQ,aAAR,CAAT;;AAEA,SAAS,aAAT,CAAuB,CAAvB,EAA0B,IAA1B,EAAgC;AAC9B,MAAI,OAAO,CAAP,KAAa,SAAb,IAA0B,OAAO,CAAP,KAAa,UAA3C,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,SAAO,OAAO,CAAP,KAAa,SAAb,GAAyB,CAAzB,GAA6B,EAAE,IAAF,CAApC;AACD;;AAED,SAAS,YAAT,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B;AAC7B,MAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,OAAO,CAAP,KAAa,UAA1C,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,SAAO,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,EAAE,IAAF,CAAnC;AACD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,EAA5C,EAAgD;AAC9C,MAAI,UAAU,OAAO;AACnB,SAAK,QAAQ,GAAR,EADc;AAEnB,UAAO,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAtB,GAA6B,IAFjB;AAGnB,aAAS,IAHU;AAInB,eAAW;AAJQ,GAAP,EAKX,GALW,CAAd;AAMA,MAAI,YAAY,cAAc,QAAQ,SAAtB,EAAiC,IAAjC,CAAhB;AACA,UAAQ,IAAR,GAAgB,YAAY,GAAZ,GAAkB,IAAlC;;AAEA,MAAI,MAAM,KAAK,OAAL,CAAa,QAAQ,GAArB,CAAV;AACA,MAAI,gBAAgB,aAAa,SAAb,EAAwB,IAAxB,CAApB;AACA,MAAI,CAAC,aAAL,EAAoB;AAClB,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;AACD,MAAI,WAAW,QAAQ,IAAR,GACb,aAAa,QAAQ,IAArB,EAA2B,IAA3B,CADa,GACsB,KAAK,OAAL,CAAa,GAAb,EAAkB,aAAlB,CADrC;AAEA,MAAI,CAAC,QAAL,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,MAAI,YAAY,KAAK,OAAL,CAAa,QAAb,EAAuB,KAAK,QAA5B,CAAhB;AACA,MAAI,cAAc,KAAK,OAAL,CAAa,SAAb,CAAlB;;;AAGA,OAAK,IAAL,GAAa,KAAK,IAAL,IAAa,IAAI,GAAG,KAAP,EAA1B;AACA,OAAK,IAAL,CAAU,IAAV,GAAiB,QAAQ,IAAzB;AACA,OAAK,IAAL,GAAY,QAAQ,IAApB;AACA,OAAK,GAAL,GAAW,GAAX;AACA,OAAK,IAAL,GAAY,QAAZ;AACA,OAAK,IAAL,GAAY,SAAZ;;;AAGA,MAAI,aAAa;AACf,UAAM,QAAQ,OADC;AAEf,QAAI;AAFW,GAAjB;AAIA,SAAO,WAAP,EAAoB,UAApB,EAAgC,UAAS,GAAT,EAAc;AAC5C,QAAI,GAAJ,EAAS;AACP,aAAO,GAAG,GAAH,CAAP;AACD;AACD,OAAG,IAAH,EAAS,SAAT;AACD,GALD;AAMD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"prepareWrite-compiled.js","sourcesContent":["'use strict';\n\nvar assign = require('object-assign');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar fs = require('graceful-fs');\n\nfunction booleanOrFunc(v, file) {\n  if (typeof v !== 'boolean' && typeof v !== 'function') {\n    return null;\n  }\n\n  return typeof v === 'boolean' ? v : v(file);\n}\n\nfunction stringOrFunc(v, file) {\n  if (typeof v !== 'string' && typeof v !== 'function') {\n    return null;\n  }\n\n  return typeof v === 'string' ? v : v(file);\n}\n\nfunction prepareWrite(outFolder, file, opt, cb) {\n  var options = assign({\n    cwd: process.cwd(),\n    mode: (file.stat ? file.stat.mode : null),\n    dirMode: null,\n    overwrite: true,\n  }, opt);\n  var overwrite = booleanOrFunc(options.overwrite, file);\n  options.flag = (overwrite ? 'w' : 'wx');\n\n  var cwd = path.resolve(options.cwd);\n  var outFolderPath = stringOrFunc(outFolder, file);\n  if (!outFolderPath) {\n    throw new Error('Invalid output folder');\n  }\n  var basePath = options.base ?\n    stringOrFunc(options.base, file) : path.resolve(cwd, outFolderPath);\n  if (!basePath) {\n    throw new Error('Invalid base option');\n  }\n\n  var writePath = path.resolve(basePath, file.relative);\n  var writeFolder = path.dirname(writePath);\n\n  // Wire up new properties\n  file.stat = (file.stat || new fs.Stats());\n  file.stat.mode = options.mode;\n  file.flag = options.flag;\n  file.cwd = cwd;\n  file.base = basePath;\n  file.path = writePath;\n\n  // Mkdirp the folder the file is going in\n  var mkdirpOpts = {\n    mode: options.dirMode,\n    fs: fs,\n  };\n  mkdirp(writeFolder, mkdirpOpts, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, writePath);\n  });\n}\n\nmodule.exports = prepareWrite;\n"]}