{"version":3,"sources":["streamManager.js"],"names":[],"mappings":"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","file":"streamManager-compiled.js","sourcesContent":["'use strict';\n\nvar exports = module.exports = (function () {\n    var gutil = require('gulp-util'),\n        through = require('through2'),\n        useref = require('useref'),\n        es = require('event-stream'),\n        path = require('path'),\n        isRelativeUrl = require('is-relative-url'),\n        vfs = require('vinyl-fs'),\n        getPattern = require('./getPattern'),\n        addFilesFromExtStreams = require('./addFilesFromExtStreams'),\n        addHtmlToStream = require('./addHtmlToStream'),\n        additionalFiles = [],\n        unprocessed = 0,\n        end;\n\n    return {\n        options: {},\n\n        transforms: null,\n\n        getGlobs: function (file, paths, files) {\n            var pattern,\n                matches,\n                glob = require('glob'),\n                options = exports.options,\n                searchPath = options.searchPath,\n                name = paths.name,\n                basePath = paths.basePath,\n                filepath = paths.filepath;\n\n            if (searchPath && Array.isArray(searchPath)) {\n                searchPath = searchPath.length === 1 ? searchPath[0] : '{' + searchPath.join(',') + '}';\n            }\n\n            pattern = getPattern(files, {\n                destPath: name,\n                searchPath: searchPath,\n                cwd: file.cwd,\n                basePath: basePath,\n                srcPath: filepath\n            });\n\n            matches = glob.sync(pattern, { nosort: true });\n\n            if (!matches.length) {\n                matches.push(pattern);\n            }\n\n            if (options.transformPath) {\n                matches[0] = options.transformPath(matches[0]);\n            }\n\n            return matches[0];\n        },\n\n        addAssetsToStream: function (file, paths, files) {\n            var self = this,\n                gulpif = require('gulp-if'),\n                concat = require('gulp-concat'),\n                src,\n                globs,\n                name = paths.name,\n                basePath = paths.basePath,\n                filepaths = files[name].assets,\n                options = exports.options;\n\n            if (!filepaths.length) {\n                return;\n            }\n\n            unprocessed++;\n\n            // Get relative file paths and join with search paths to send to vinyl-fs\n            globs = filepaths\n                .filter(isRelativeUrl)\n                .map(function (filepath) {\n                    paths.filepath = filepath;\n\n                    return exports.getGlobs(file, paths, files);\n                });\n\n            src = vfs.src(globs, {\n                base: basePath,\n                nosort: true\n            });\n\n            src.on('error', function (err) {\n                self.emit('error', new Error(err));\n            });\n\n            // add files from external streams\n            src = addFilesFromExtStreams.call(self, additionalFiles, globs, src);\n\n            // If any external transforms were included, pipe all files to them first\n            exports.transforms.forEach(function (fn) {\n                src = src.pipe(fn(name));\n            });\n\n            // Add assets to the stream\n            // If noconcat option is false, concat the files first.\n            src\n                .pipe(gulpif(!options.noconcat, concat(name)))\n                .pipe(through.obj(function (newFile, encoding, callback) {\n                    // specify an output path relative to the cwd\n                    if (options.base) {\n                        newFile.path = path.join(options.base, name);\n                        newFile.base = options.base;\n                    }\n\n                    // add file to the asset stream\n                    self.push(newFile);\n                    callback();\n                }))\n                .on('finish', function () {\n                    if (--unprocessed === 0 && end) {\n                        // end the asset stream\n                        end();\n                    }\n                });\n        },\n\n        processAssets: function (file, basePath, data) {\n            var self = this,\n                types = exports.options.types || [ 'css', 'js' ];\n\n            types.forEach(function (type) {\n                var files = data[type],\n                    name;\n\n                if (!files) {\n                    return;\n                }\n\n                for (name in files) {\n                    exports.addAssetsToStream.call(self, file, {\n                        name: name,\n                        basePath: basePath\n                    }, files);\n                }\n            });\n        },\n\n        processFilesAndAssets: function (file, cb) {\n            var self = this,\n                output,\n                options = exports.options,\n\n                // Cache the file base path relative to the cwd\n                // Use later when it could be dropped\n                _basePath = path.dirname(file.path);\n\n            if (file.isNull()) {\n                return cb(null, file);\n            }\n\n            if (file.isStream()) {\n                return cb(new gutil.PluginError('gulp-useref', 'Streaming not supported'));\n            }\n\n            output = useref(file.contents.toString(), options);\n\n            addHtmlToStream.call(self, file, output[0]);\n\n            if (!options.noAssets) {\n                exports.processAssets.call(self, file, _basePath, output[1]);\n            }\n\n            cb();\n        },\n\n        transformFunction: function (file, enc, cb) {\n            var self = this;\n\n            exports.waitForAssets.pipe(es.wait(function () {\n                exports.processFilesAndAssets.call(self, file, cb);\n            }));\n        },\n\n        flushFunction: function (cb) {\n            end = cb;\n            if (unprocessed === 0) {\n                return cb();\n            }\n        },\n\n        additionalStreams: function () {\n            var options = exports.options;\n\n            // reinitialize global variable\n            unprocessed = 0;\n\n            // If any external streams were included, add matched files to src\n            if (options.additionalStreams) {\n                if (!Array.isArray(options.additionalStreams)) {\n                    options.additionalStreams = [ options.additionalStreams ];\n                }\n\n                options.additionalStreams = options.additionalStreams.map(function (stream) {\n                    // filters stream to select needed files\n                    return stream\n                        .pipe(es.through(function (file) {\n                            additionalFiles.push(file);\n                        }));\n                });\n            }\n\n            if (options.additionalStreams) {\n                // If we have additional streams, wait for them to run before continuing\n                exports.waitForAssets = es.merge(options.additionalStreams).pipe(through.obj());\n            } else {\n                // Else, create a fake stream\n                exports.waitForAssets = through.obj();\n                exports.waitForAssets.emit('finish');\n            }\n        }\n    };\n}());\n"]}