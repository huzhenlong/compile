{"version":3,"sources":["through2-concurrent.js"],"names":[],"mappings":";;;;AAEA,IAAI,WAAW,QAAQ,UAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB,SAAS,iBAAT,CAA4B,OAA5B,EAAqC,SAArC,EAAgD,KAAhD,EAAuD;AACtE,MAAI,aAAa,CAAjB;MAAoB,eAAe,IAAnC;MAAyC,eAAe,IAAxD;MAA8D,WAA9D;;AAEA,MAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,YAAY,SAAZ;AACA,gBAAY,OAAZ;AACA,cAAY,EAAZ;AACD;;AAED,mBAAiB,QAAQ,cAAR,IAA0B,EAA3C;;AAEA,WAAS,UAAT,CAAqB,OAArB,EAA8B,GAA9B,EAAmC,QAAnC,EAA6C;AAC3C,QAAI,OAAO,IAAX;AACA,QAAI,iBAAiB,KAArB;AACA;AACA,QAAI,aAAa,cAAjB,EAAiC;;AAE/B;AACD,KAHD,MAGO;;;AAGL,qBAAe,QAAf;AACD;;AAED,cAAU,IAAV,CAAe,IAAf,EAAqB,OAArB,EAA8B,GAA9B,EAAmC,UAAU,GAAV,EAAe;;;AAGhD,UAAI,cAAJ,EAAoB;AACpB,uBAAiB,IAAjB;;AAEA,UAAI,GAAJ,EAAS;AACP,aAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB;AACD,OAFD,MAEO,IAAI,UAAU,MAAV,GAAmB,CAAvB,EAA0B;AAC/B,aAAK,IAAL,CAAU,UAAU,CAAV,CAAV;AACD;;AAED;AACA,UAAI,YAAJ,EAAkB;AAChB,YAAI,KAAK,YAAT;AACA,uBAAe,IAAf;AACA;AACD;AACD,UAAI,eAAe,CAAf,IAAoB,YAAxB,EAAsC;AACpC;AACA,uBAAe,IAAf;AACD;AACF,KAtBD;AAuBD;;;;;;;AAOD,MAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,YAAQ,eAAU,QAAV,EAAoB;AAC1B;AACD,KAFD;AAGD;;AAED,WAAS,MAAT,CAAiB,QAAjB,EAA2B;;AAEzB,QAAI,eAAe,CAAnB,EAAsB;AACpB,YAAM,IAAN,CAAW,IAAX,EAAgB,QAAhB;AACD,KAFD,MAEO;AACL,qBAAe,MAAM,IAAN,CAAW,IAAX,EAAiB,QAAjB,CAAf;AACD;AACF;;AAED,SAAO,SAAS,OAAT,EAAkB,UAAlB,EAA8B,MAA9B,CAAP;AACD,CAtED;;AAwEA,OAAO,OAAP,CAAe,GAAf,GAAqB,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,EAAqC;AACxD,MAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,YAAY,SAAZ;AACA,gBAAY,OAAZ;AACA,cAAY,EAAZ;AACD;;AAED,UAAQ,UAAR,GAAqB,IAArB;AACA,MAAI,QAAQ,aAAR,IAAyB,IAA7B,EAAmC;AACjC,YAAQ,aAAR,GAAwB,EAAxB;AACD;AACD,SAAO,OAAO,OAAP,CAAe,OAAf,EAAwB,SAAxB,EAAmC,KAAnC,CAAP;AACD,CAZD","file":"through2-concurrent-compiled.js","sourcesContent":["// Like through2 except execute in parallel with a set maximum\n// concurrency\nvar through2 = require('through2');\n\nmodule.exports = function concurrentThrough (options, transform, flush) {\n  var concurrent = 0, lastCallback = null, pendingFlush = null, concurrency;\n\n  if (typeof options === 'function') {\n    flush     = transform;\n    transform = options;\n    options   = {};\n  }\n\n  maxConcurrency = options.maxConcurrency || 16;\n\n  function _transform (message, enc, callback) {\n    var self = this;\n    var callbackCalled = false;\n    concurrent++;\n    if (concurrent < maxConcurrency) {\n      // Ask for more right away\n      callback();\n    } else {\n      // We're at the concurrency limit, save the callback for\n      // when we're ready for more\n      lastCallback = callback;\n    }\n\n    transform.call(this, message, enc, function (err) {\n      // Ignore multiple calls of the callback (shouldn't ever\n      // happen, but just in case)\n      if (callbackCalled) return;\n      callbackCalled = true;\n\n      if (err) {\n        self.emit('error', err);\n      } else if (arguments.length > 1) {\n        self.push(arguments[1]);\n      }\n\n      concurrent--;\n      if (lastCallback) {\n        var cb = lastCallback;\n        lastCallback = null;\n        cb();\n      }\n      if (concurrent === 0 && pendingFlush) {\n        pendingFlush();\n        pendingFlush = null;\n      }\n    });\n  }\n\n  // Provide a default implementation of the 'flush' argument so that\n  // the waiting code below can stay simple. We need to pass in flush\n  // to through2 even if the caller has not given us a flush argument\n  // so that it will wait for all transform callbacks to complete\n  // before emitting an \"end\" event.\n  if (typeof flush !== 'function') {\n    flush = function (callback) {\n      callback();\n    };\n  }\n\n  function _flush (callback) {\n    // Ensure that flush isn't called until all transforms are complete\n    if (concurrent === 0) {\n      flush.call(this,callback);\n    } else {\n      pendingFlush = flush.bind(this, callback);\n    }\n  }\n\n  return through2(options, _transform, _flush);\n};\n\nmodule.exports.obj = function (options, transform, flush) {\n  if (typeof options === 'function') {\n    flush     = transform;\n    transform = options;\n    options   = {};\n  }\n\n  options.objectMode = true;\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 16;\n  }\n  return module.exports(options, transform, flush);\n};\n"]}